"""
Module: morpho_img.py

This module exposes the business logic for generating morphology thumbnails
"""

import io
from typing import Union

import matplotlib.pyplot as plt
import neurom as nm
from neurom.view import matplotlib_impl, matplotlib_utils

from api.services.nexus import fetch_file_content
from api.utils.common import get_buffer


def plot_morphology(morphology) -> plt.Figure:
    """
    Creates and formats a matplotlib figure object.

    Parameters:
        - morphology: a morphology object as generated by neurom
    Returns:
        The matplotlib figure
    """
    fig, ax = matplotlib_utils.get_figure()

    matplotlib_impl.plot_morph(morphology, ax)

    ax.set_title("")
    ax.set_aspect("equal")
    ax.set_frame_on(False)
    ax.xaxis.set_visible(False)
    ax.yaxis.set_visible(False)
    bounds = ax.dataLim.bounds
    white_space = 0.05
    ax.set_xlim(bounds[0] - white_space, bounds[0] + bounds[2] + white_space)
    ax.set_ylim(bounds[1] - white_space, bounds[1] + bounds[3] + white_space)

    fig.set_layout_engine("tight")

    return fig


def generate_morphology_image(access_token: str, content_url: str = "", dpi: Union[int, None] = 72) -> bytes:
    """
    Returns a PNG image of a morphology (by generating a matplotlib figure from its SWC distribution).

    Parameters:
        - authorization (str): Authorization header containing the access token.
        - content_url (str): URL of the SWC distribution.
    Returns:
        The image in bytes format
    """
    morph = fetch_file_content(access_token, content_url).decode(encoding="utf-8")

    morphology = nm.load_morphology(io.StringIO(morph), reader="swc")

    fig = plot_morphology(morphology)

    try:
        # Generate the buffer for the image
        buffer = get_buffer(fig, dpi)

        # Convert buffer to bytes
        image_bytes = buffer.getvalue()

    finally:
        # Explicitly close the figure to release memory
        plt.close(fig)

    return image_bytes
